(Day 17) 31-10-2025
~~~~~~~~~~~~~~~~~
Jenkins
~~~~~~~~~~~~~~~~~
Jenkins + GitHub + Maven + Nexus + SonarQube + Tomcat + S3 -----> Pipeline Project

Jenkins		---- CI & CD process
GitHub		---- To store the source code of the application
Maven		---- To generate the artifacts
Nexus & S3	---- To store the artifacts
SonarQube	---- Code Quality Analysis
Tomcat		---- Deployment of Application

2 Amazon Linux 2023 AMI, t2.medium, 30 GB
	VM1 - Jenkins Server
	VM2 - Sonar Server

1 Amazon Linux 2023 AMI, t2.micro, 30 GB
	VM3 - Tomcat Server

1 Ubuntu 24.04 AMI, t2.medium, 30 GB
	VM4 - Nexus Server


Jenkins Setup
======================
sudo dnf update -y
sudo dnf install java-17-amazon-corretto-devel -y
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo dnf install jenkins -y
sudo systemctl daemon-reload
sudo systemctl enable jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins


Tomcat Configuration
======================
==>Edit the content in context.xml file of below path;

cd apache-tomcat-9.0.111/webapps/manager/META-INF ----> vi context.xml ----> Remove the entire content and paste the below content ---->

<Context antiResourceLocking="false" privileged="true">
  <Valve className="org.apache.catalina.valves.RemoteAddrValve"
         allow="^.*$" />
</Context>

==>Edit the content in context.xml file of below path;

cd apache-tomcat-9.0.111/webapps/host-manager/META-INF ----> vi context.xml ----> Remove the entire content and paste the below content ---->

<Context antiResourceLocking="false" privileged="true">
  <Valve className="org.apache.catalina.valves.RemoteAddrValve"
         allow="^.*$" />
</Context>

==> Edit the content in "tomcat-users.xml" file of below path;

cd apache-tomcat-9.0.111/conf ----> vi tomcat-users.xml ----> Remove the entire content and paste the below content ---->

<?xml version="1.0" encoding="UTF-8"?>
<tomcat-users xmlns="http://tomcat.apache.org/xml"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd"
              version="1.0">

  <role rolename="manager-gui"/>
  <role rolename="admin-gui"/>
  <role rolename="manager-script"/>
  <user username="tomcat" password="tomcat" roles="manager-gui"/>
  <user username="admin" password="admin" roles="manager-gui,admin-gui,manager-script"/>

</tomcat-users>


Sonar Setup
======================
We will install docker and using docker we will setup SonarQube

Docker Images - configurations related to the specific tool
Docker Container - server for SonarQube 

    sudo dnf update -y
    sudo dnf install -y docker
    sudo systemctl start docker
    sudo systemctl enable docker
    sudo usermod -aG docker $USER
    docker --version

SonarQube will run on port number 9000

docker run -d --name sonarqube -p 9000:9000 sonarqube:lts-community

Nexus Setup
======================
We will install docker and using docker we will setup Nexus

    sudo apt update
    sudo apt install ca-certificates curl gnupg
    sudo install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo chmod a+r /etc/apt/keyrings/docker.gpg
    echo \
      "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt update
    sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin


Nexus will run on port number 8081

Login to the container
docker exec -it <ContainerID> /bin/bash

Pipeline 1
-----------------------------
pipeline {
    agent any
    tools {
        maven 'maven3'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git 'https://github.com/KastroVKiran/Hotstar-App.git'
            }
        }
        stage('Maven Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Maven Artifacts') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Tomcat Deployment') {
            steps {
                deploy adapters: [tomcat9(alternativeDeploymentContext: '', credentialsId: 'tomcat-creds', path: '', url: 'http://174.129.45.94:8080/')], contextPath: 'hotstar-app', war: '**/*.war'
            }
        }
    }
}


Maven is configured as "maven3"

SonarQube Token
squ_1e87d2ee4521dad449381f931910531be97c44d4

Pipeline 2
-----------------------------
pipeline {
    agent any
    tools {
        maven 'maven3'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git 'https://github.com/KastroVKiran/Hotstar-App.git'
            }
        }
        stage('Maven Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Maven Artifacts') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('SonarQube Scanning') {
            steps {
                withSonarQubeEnv(credentialsId: 'sonarqube') {
                    sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
                }
            }
        }
        stage('Tomcat Deployment') {
            steps {
                deploy adapters: [tomcat9(alternativeDeploymentContext: '', credentialsId: 'tomcat-creds', path: '', url: 'http://174.129.45.94:8080/')], contextPath: 'hotstar-app', war: '**/*.war'
            }
        }
    }
}


Pipeline 3 - Final Pipeline (without SonarQube)
pipeline {
    agent any
    tools {
        maven 'maven3'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git 'https://github.com/KastroVKiran/Hotstar-App.git'
            }
        }
        stage('Maven Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Maven Artifacts') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Nexus Artifacts') {
            steps {
                nexusArtifactUploader artifacts: [[artifactId: 'myapp', classifier: '', file: 'target/myapp.war', type: 'war']], credentialsId: 'nexus', groupId: 'in.kastro', nexusUrl: '54.172.219.246:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'hotstar', version: '8.3.3-SNAPSHOT'
            }
        }
        stage('S3 Artifacts') {
            steps {
                s3Upload consoleLogLevel: 'INFO', dontSetBuildResultOnFailure: false, dontWaitForConcurrentBuildCompletion: false, entries: [[bucket: 's3-artifact-uploader-24102025/', excludedFile: '', flatten: false, gzipFiles: false, keepForever: false, managedArtifacts: false, noUploadOnFailure: false, selectedRegion: 'us-east-1', showDirectlyInBrowser: false, sourceFile: '**/*.war', storageClass: 'STANDARD', uploadFromSlave: false, useServerSideEncryption: false]], pluginFailureResultConstraint: 'FAILURE', profileName: 's3-artifacts', userMetadata: []
            }
        }
        stage('Tomcat Deployment') {
            steps {
                deploy adapters: [tomcat9(alternativeDeploymentContext: '', credentialsId: 'tomcat-creds', path: '', url: 'http://174.129.45.94:8080/')], contextPath: 'hotstar-app', war: '**/*.war'
            }
        }
    }
}





















